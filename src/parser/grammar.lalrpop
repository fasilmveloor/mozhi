use crate::lexer::tokens::*;
use crate::lexer::LexicalError;
use crate::executor::ast::*;

grammar(input: &str);

pub SourceUnit:SourceUnit = {
    SourceUnitPart+ => SourceUnit(<>)
};

SourceUnitPart:SourceUnitPart = {
    Statement => SourceUnitPart::Statement(<>),
};

Expressions = Comma<Expression>;
Comma<T>:Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Statement:Statement = {
    <a:@L> <l:Expression> "=" <r:Expression> ";" <b:@R> => Statement::Assignment((a,b),l,r),
    <a:@L> <l:Expression> "ഇൻപുട്" "ചെയ്യുക" ";" <b:@R> => Statement::Input((a,b),l),
    <a:@L> <e:Expression> "എന്നു" Write ";" <b:@R> => Statement::Write((a,b),e),
    <a:@L> <e:Expression> Write ";" <b:@R> => Statement::Write((a,b),e),
    <a:@L> <e:Expression> "എന്നു" "പ്രിന്റ്" "ചെയ്യുക" ";" <b:@R> => Statement::Write((a,b),e),
    <a:@L> <condition:Conditional> "{" <s:SourceUnit> "}" <b:@R> => Statement::Conditional((a,b),condition,s,None),
    <a:@L> <condition:Conditional> "{" <s:SourceUnit> "}" "അല്ലെങ്കിൽ" "{" <f:SourceUnit> "}" <b:@R> => Statement::Conditional((a,b),condition,s,Some(f)),
    <a:@L> <name:Expression> "(" <params:Expressions> ")" "{" <s:SourceUnit> "}" <b:@R> => Statement::FunctionDeclaration((a,b),name,params,s),
    <a:@L> Return <expr:Expression> ";" <b:@R>  => Statement::Return((a,b),expr),
    <a:@L> <expr:Expression> ";" <b:@R>  => Statement::EmptyExpression((a,b),expr),
    <a:@L> <condition:LoopConditional> "ആവർത്തിക്കുക" "{" <s:SourceUnit> "}" <b:@R> => Statement::Loop((a,b),condition,s),
    <a:@L> <term:Term> "തവണ" "ആവർത്തിക്കുക" "{" <s:SourceUnit> "}" <b:@R> => Statement::ForLoop((a,b),term,s)
}; 

Expression:Expression= {
    ArithExpression
}

Conditional:Expression = {
    <l:Expression> "ഉം"  <r:Expression> "ഉം" <a:@L> "തുല്യമാണെങ്കിൽ" <b:@R> => Expression::Equals((a,b),Box::new(l),Box::new(r)),
    <l:Expression>  "ഉം" <r:Expression> "ഉം" <a:@L> "തുല്യമല്ലെങ്കിൽ" <b:@R>  => Expression::NotEquals((a,b),Box::new(l),Box::new(r)),
    <r:Expression>  "നെകാൾ" <l:Expression> <a:@L> "വലുതാണെകിൽ" <b:@R> => Expression::GreaterThan((a,b),Box::new(l),Box::new(r)),
    <r:Expression>  "നെകാൾ" <l:Expression> <a:@L> "ചെറുതാണെകിൽ" <b:@R> => Expression::LessThan((a,b),Box::new(l),Box::new(r)),
    <r:Expression>  "നെകാൾ" <l:Expression> <a:@L> "വലുതോതുല്യമോആണെങ്കിൽ" <b:@R> => Expression::GreaterThanOrEqual((a,b),Box::new(l),Box::new(r)),
    <r:Expression>  "നെകാൾ" <l:Expression> <a:@L> "ചെറുതോതുല്യമോആണെങ്കിൽ" <b:@R> => Expression::LessThanOrEqual((a,b),Box::new(l),Box::new(r)),
    <l:Expression> "=""="  <r:Expression> <a:@L> "ആണെങ്കിൽ" <b:@R> => Expression::Equals((a,b),Box::new(l),Box::new(r)),
    <l:Expression>  "!""=" <r:Expression> <a:@L> "ആണെങ്കിൽ" <b:@R>  => Expression::NotEquals((a,b),Box::new(l),Box::new(r)),
    <l:Expression>  ">" <r:Expression> <a:@L> "ആണെങ്കിൽ" <b:@R> => Expression::GreaterThan((a,b),Box::new(l),Box::new(r)),
    <l:Expression>  "<" <r:Expression> <a:@L> "ആണെങ്കിൽ" <b:@R> => Expression::LessThan((a,b),Box::new(l),Box::new(r)),
    <l:Expression>  ">""=" <r:Expression> <a:@L> "ആണെങ്കിൽ" <b:@R> => Expression::GreaterThanOrEqual((a,b),Box::new(l),Box::new(r)),
    <l:Expression>  "<""=" <r:Expression> <a:@L> "ആണെങ്കിൽ" <b:@R> => Expression::LessThanOrEqual((a,b),Box::new(l),Box::new(r)),
    Term,
};


LoopConditional:Expression = {
    <l:Expression> "ഉം"  <r:Expression> "ഉം" <a:@L> "തുല്യമല്ലാതാകുന്നതുവരെ" <b:@R> => Expression::Equals((a,b),Box::new(l),Box::new(r)),
    <l:Expression> "ഉം" <r:Expression> "ഉം" <a:@L> "തുല്യമാകുന്നതുവരെ" <b:@R>  => Expression::NotEquals((a,b),Box::new(l),Box::new(r)),
    // TODO: Need to add space instead of comma
    <l:Expression> "," <r:Expression> "നെകാൾ" <a:@L> "വലുതാകുന്നതുവരെ" <b:@R> => Expression::LessThanOrEqual((a,b),Box::new(l),Box::new(r)),
    <l:Expression> "," <r:Expression> "നെകാൾ" <a:@L> "ചെറുതാകുന്നതുവരെ" <b:@R> => Expression::GreaterThan((a,b),Box::new(l),Box::new(r)),
    <l:Expression> "," <r:Expression> "നെകാൾ" <a:@L> "വലുതോതുല്യമോആകുന്നതുവരെ" <b:@R> => Expression::LessThan((a,b),Box::new(l),Box::new(r)),
    <l:Expression> "," <r:Expression> "നെകാൾ" <a:@L> "ചെറുതോതുല്യമോആകുന്നതുവരെ" <b:@R> => Expression::GreaterThanOrEqual((a,b),Box::new(l),Box::new(r)),
    <l:Expression> "!""="  <r:Expression> <a:@L> "ആകുന്നതുവരെ" <b:@R> => Expression::Equals((a,b),Box::new(l),Box::new(r)),
    <l:Expression>  "=""=" <r:Expression> <a:@L> "ആകുന്നതുവരെ" <b:@R>  => Expression::NotEquals((a,b),Box::new(l),Box::new(r)),
    <l:Expression>  "<""=" <r:Expression> <a:@L> "ആകുന്നതുവരെ" <b:@R> => Expression::GreaterThan((a,b),Box::new(l),Box::new(r)),
    <l:Expression>  ">""=" <r:Expression> <a:@L> "ആകുന്നതുവരെ" <b:@R> => Expression::LessThan((a,b),Box::new(l),Box::new(r)),
    <l:Expression>  "<" <r:Expression> <a:@L> "ആകുന്നതുവരെ" <b:@R> => Expression::GreaterThanOrEqual((a,b),Box::new(l),Box::new(r)),
    <l:Expression>  ">" <r:Expression> <a:@L> "ആകുന്നതുവരെ" <b:@R> => Expression::LessThanOrEqual((a,b),Box::new(l),Box::new(r)),
    Term,
};

ArithExpression: Expression = {
    <l:ArithExpression> <a:@L> "+" <b:@R> <r:Factor> => Expression::Add((a,b),Box::new(l),Box::new(r)),
    <l:ArithExpression> <a:@L> "-" <b:@R> <r:Factor> => Expression::Subtract((a,b),Box::new(l),Box::new(r)),
    Factor,
};

Factor: Expression= {
    <l:Factor> <a:@L> "*" <b:@R> <r:Unary> => Expression::Multiply((a,b),Box::new(l),Box::new(r)),
    <l:Factor> <a:@L> "/" <b:@R> <r:Unary> => Expression::Divide((a,b),Box::new(l),Box::new(r)),
    <l:Factor> <a:@L> "%" <b:@R> <r:Unary> => Expression::Modulo((a,b),Box::new(l),Box::new(r)),
    Unary,
};

Unary:Expression = {
    <a:@L> "-" <b:@R> <r:Unary> => Expression::UnaryMinus((a,b),Box::new(r)),
    Term
};

Term: Expression= {
    <a:@L> <v:Integer> <b:@R> => Expression::Integer((a,b),v),
    <a:@L> <v:Float> <b:@R> => Expression::Float((a,b),v),
    <a:@L> <id:Identifier> <b:@R> => Expression::Symbol((a,b),id),
    <a:@L> <string:StringLiteral> <b:@R> => Expression::StringLiteral((a,b),string),
    "(" <e:Expression> ")" => e
};

extern {
    type Location = usize;
    type Error = LexicalError;

    enum TokenType {
        "+" => TokenType::Plus,
        "-" => TokenType::Minus,
        "*" => TokenType::Product,
        "/" => TokenType::Divide,
        "(" => TokenType::OpenParantheses,
        ")" => TokenType::CloseParantheses,
        ";" => TokenType::SemiColon,
        "=" => TokenType::Assignment,
        ">=" => TokenType::GreaterThanOrEqual,
        "<=" => TokenType::LessThanOrEqual,
        "==" => TokenType::EqualTo,
        "!=" => TokenType::NotEqual,
        "{" => TokenType::LeftBrace,
        "}" => TokenType::RightBrace,
        "%" => TokenType::Modulo,
        "," => TokenType::Comma,
        "<" => TokenType::AngleOpen,
        ">" => TokenType::AngleClose,
        "!" => TokenType::Not,
        Identifier => TokenType::Symbol(usize),
        Integer => TokenType::Integer(i64),
        Float => TokenType::Float(f64),
        StringLiteral => TokenType::Literal(usize),
        Write => TokenType::Write,
        Return => TokenType::Return,
        "അല്ലെങ്കിൽ" => TokenType::Else,
        "ഉം" => TokenType::Um,
        "ആവർത്തിക്കുക" => TokenType::Loop,
        "പ്രിന്റ്" => TokenType::Print,
        "ഇൻപുട്" => TokenType::Input,
        "നെകാൾ" => TokenType::Nekal,
        "ചെയ്യുക" => TokenType::Do,
        "എന്നു" => TokenType::Ennu,
        "തവണ" => TokenType::Thavana,
        "വലുതാണെകിൽ" => TokenType::GreaterThan,
        "ചെറുതാണെകിൽ" => TokenType::LessThan,
        "തുല്യമാണെങ്കിൽ" => TokenType::Thulyamanenkil,
        "തുല്യമല്ലെങ്കിൽ" => TokenType::Thulyamallenkil,
        "വലുതോതുല്യമോആണെങ്കിൽ" => TokenType::ValuthoThulyamoAnenkil,
        "ചെറുതോതുല്യമോആണെങ്കിൽ" => TokenType::CheruthoThulyamoAnenkil,
        "തുല്യമാകുന്നതുവരെ" => TokenType::UntilEqualTo,
        "തുല്യമല്ലാതാകുന്നതുവരെ" => TokenType::UntilNotEqual,
        "വലുതാകുന്നതുവരെ" => TokenType::UntilGreaterThan,
        "ചെറുതാകുന്നതുവരെ" => TokenType::UntilLessThan,
        "വലുതോതുല്യമോആകുന്നതുവരെ" => TokenType::UntilGreaterThanOrEqual,
        "ചെറുതോതുല്യമോആകുന്നതുവരെ" => TokenType::UntilLessThanOrEqual,
        "ആകുന്നതുവരെ" => TokenType::Until,
        "ആണെങ്കിൽ" => TokenType::Anenkil,
    }
}